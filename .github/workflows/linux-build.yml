# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Please write our copyright if you use this file.
# © 2023 Floorp Projects & Contributors

#! SELF HOST DOES NOT SUPPORTED
#TODO! buildjet config not implemented
#! Deb && aarch64 may not supported
#TODO: separate Publish to other workflow

#? In GitHub, boolean DOES NOT return `true`, DOES return `'true'`
#? So, In `if:`(github) or `if [];then`(bash), you may SHOULD write like
#? `if: ${{boolean == 'true'}}`(github), `if [ ${{boolean}} == 'true' ];then`(bash)
#? ref https://github.com/actions/runner/issues/1483
#? and in bash, space between [ and value is important like [ ${{}} ]
on:
  workflow_call:
    inputs:
      deb:
        description: to pack to deb
        type: boolean
        default: false
      aarch64:
        description: "aarch64 option is not compartiable with deb option"
        type: boolean
        default: false
      ppa:
        type: boolean
        default: false
      with_raw:
        description: "with all files of dist(esp. for make mar)"
        type: boolean
        default: false



# name: Linux Build
# description: Action of Floorp Linux build (x64, aarch64)

jobs:
  linux-build:
    runs-on: ubuntu-latest
    steps:

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update


    #! ON UBUNTU RUNNER
    - name: Setup Disk & Swap Space 💿
      run: |
        echo Before:
        free -h
        df -h
        echo
        echo
        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile

        sudo fallocate -l 8G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt clean
        # dpkg --list |grep "^rc" | cut -d " " -f 3 | xargs sudo dpkg --purge
        sudo apt remove temurin* openjdk*
        sudo apt remove microsoft-edge* firefox* google-chrome*
        sudo apt remove mono* libmono* msbuild* dotnet*
        sudo apt remove llvm-15* llvm-14* llvm-13* llvm-12* libllvm15* libllvm14* libllvm13* libllvm12*
        sudo apt remove gfortran* php* julia* r-*
        sudo apt remove mysql* postgresql*
        sudo apt remove google-cloud-sdk azure-cli powershell snapd

        sudo rm -rf /usr/share/swift &
        sudo rm -rf /usr/local/aws-cli &
        sudo rm -rf /usr/local/aws-sam-cli &
        sudo rm -rf /usr/local/julia* &
        sudo rm -rf /usr/local/lib/android &
        sudo rm -rf /usr/local/lib/node_modules &
        sudo rm -rf /opt/hostedtoolcache &
        sudo rm -rf /opt/pipx &
        sudo rm -rf /snap &
        wait

        sudo fallocate -l 12G /home/runner/swapfile
        sudo chmod 600 /home/runner/swapfile
        sudo mkswap /home/runner/swapfile
        sudo swapon /home/runner/swapfile
        # sudo fallocate -l 10G /home/runner/swapfile2
        # sudo chmod 600 /home/runner/swapfile2
        # sudo mkswap /home/runner/swapfile2
        # sudo swapon /home/runner/swapfile2

        sudo sysctl vm.swappiness=10


        echo
        echo
        echo After:
        free -h
        df -h

    - uses: actions/checkout@v3
      name: Clone 🧬

    - name: Clone l10n-central 🧬
      uses: actions/checkout@v3
      with:
        repository: Floorp-Projects/l10n-central
        path: l10n-central

    - name: Prepare cross compiler (aarch64)⚒
      if: ${{ inputs.aarch64 && !inputs.deb }}
      run: |
        sudo apt update
        sudo apt -y install gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu

    - name: setup Rust 🦀
      run: |
        if [[ $GHA_aarch64 == 'true' ]];then
          rustup target add aarch64-unknown-linux-gnu
        fi

        #? https://github.com/mozilla/sccache#known-caveats
        export CARGO_INCREMENTAL=0
      env:
        GHA_aarch64: ${{inputs.aarch64}}

    - name: Configure sccache
      uses: actions/github-script@v6
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Create environment 🌲
      run: |
        import os
        import sys
        import shutil

        deb = os.environ["GHA_deb"] == "true"
        aarch64 = os.environ["GHA_aarch64"] == "true"

        os.system("sudo apt update")
        os.system("sudo apt install xvfb")

        shutil.copyfile("./.github/mozconfig_linux_base","./mozconfig")
        # os.system("cp ./.github/mozconfig_linux_base ./mozconfig")
        if deb:
          os.system("sudo apt install gzip gpg dpkg-dev")
          os.system("export WORKDIR=`pwd`")
          os.system("echo 'Current Workdir: $WORKDIR'")

        mozconfig = []

        if deb and not aarch64:
          mozconfig.append('ac_add_options --disable-updater')

        if aarch64:
          mozconfig += [
            ('ac_add_options --enable-rust-simd')
          , ('ac_add_options --target=aarch64-unknown-linux-gnu')
          ]



        if not aarch64:
          mozconfig.append('ac_add_options MOZ_PGO=1')

        # SCCACHE SETTINGS START
        mozconfig += [
          ("mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'")
        , ("mk_add_options 'export CCACHE_CPP2=yes'")
        , ("ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache")
        , ("mk_add_options 'export SCCACHE_GHA_ENABLED=on'")
        ]
        # SCCACHE SETTINGS END

        mozconfig_file = open("mozconfig",'a')
        mozconfig_file.writelines('\n'.join(mozconfig))

        mozconfig_file.close()
        os.system("cat mozconfig")
        os.system("./mach --no-interactive bootstrap --application-choice browser")

      env:
        GHA_deb: ${{inputs.deb}}
        GHA_aarch64: ${{inputs.aarch64}}
      shell: python3 {0}

    - name: Build 🔨

      run: |
        if [[ $GHA_aarch64 != 'true' ]]; then
          rm -rf ./l10n-central/.git
        fi

        Xvfb :2 -screen 0 1024x768x24 &
        export DISPLAY=:2

        export WORKDIR=`pwd`
        echo "Current Workdir: $WORKDIR"
        ./mach configure
        ./mach build
      env:
        GHA_aarch64: ${{inputs.aarch64}}

    - name: Package 1 - mach 🎁
      run: |
        ./mach package

        ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW

    - name: Package 2 - deb or zip 📦

      run: |
        # export MOZ_CHROME_MULTILOCALE="ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW"
        # for AB_CD in $MOZ_CHROME_MULTILOCALE; do    ./mach build chrome-$AB_CD; done
        # AB_CD=multi ./mach package
        # ./mach package-multi-locale --locales ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th vi zh-CN zh-TW

        # wait

        # FOR DEBUG 1 START

        sudo apt install tree

        #FOR DEBUG 1 END

        if [[ $GHA_deb == 'true' && $GHA_aarch64 != 'true' ]];then
          echo `cat browser/config/version.txt`
          echo `cat browser/config/version_display.txt`

          export WORKDIR=`pwd`

          export VER=`cat browser/config/version.txt`
          #? output name of build is based on version.txt
          export DISPVER=`cat browser/config/version_display.txt`
          export DEBWORK=$WORKDIR/floorp-$DISPVER
          mkdir -p $DEBWORK/usr/lib/
          cd $DEBWORK/usr/lib/
          mkdir -p floorp-addons/distribution/extensions
          mkdir floorp-addons/extensions
          mkdir floorp-addons/plugins

          cd $WORKDIR

          # FOR DEBUG 2 START
          # echo '----TREE_S----'
          # tree
          # echo '----TREE_E----'
          # FOR DEBUG 2 END

          cd $DEBWORK/usr/lib/

          #? CHANGE DISPVER TO VER
          tar -xjvf $WORKDIR/obj-x86_64-pc-linux-gnu/dist/floorp-$VER.en-US.linux-x86_64.tar.bz2
          cd ..
          mkdir bin
          cd bin
          ln -s ../lib/floorp/floorp.sh floorp
          cd ..
          mkdir -p share/applications
          cp $WORKDIR/.github/floorp-debian.desktop share/applications/floorp.desktop
          cd $DEBWORK
          cd ../
          inst_size=$(du -ks floorp-$DISPVER|awk '{print $1}')
          cd $DEBWORK
          mkdir DEBIAN
          cd DEBIAN
          echo -e "Package: floorp\\nVersion: $DISPVER\\nArchitecture: amd64\\nMaintainer: Floorp project\\nInstalled-Size: ${inst_size}\\nDepends: curl, lsb-release, libasound2 (>= 1.0.16), libatk1.0-0 (>= 1.12.4), libc6 (>= 2.30), libcairo-gobject2 (>= 1.10.0), libcairo2 (>= 1.10.0), libdbus-1-3 (>= 1.9.14), libdbus-glib-1-2 (>= 0.78), libfontconfig1 (>= 2.12.6), libfreetype6 (>= 2.10.1), libgcc-s1 (>= 3.3), libgdk-pixbuf2.0-0 (>= 2.22.0), libglib2.0-0 (>= 2.42), libgtk-3-0 (>= 3.14), libharfbuzz0b (>= 0.6.0), libpango-1.0-0 (>= 1.14.0), libpangocairo-1.0-0 (>= 1.14.0), libstdc++6 (>= 9), libx11-6, libx11-xcb1 (>= 2:1.6.9), libxcb-shm0, libxcb1, libxcomposite1 (>= 1:0.4.5), libxcursor1 (>> 1.1.2), libxdamage1 (>= 1:1.1), libxext6, libxfixes3, libxi6, libxrandr2 (>= 2:1.4.0), libxrender1, libxtst6, fonts-noto-cjk\\nRecommends: libcanberra0, libdbusmenu-glib4, libdbusmenu-gtk3-4\\nSuggests: fonts-lyx, fonts-mplus\\nProvides: gnome-www-browser, www-browser\\nSection: web\\nPriority: optional\\nDescription: Floorp is a new Firefox-based,\\n privacy-preserving browser developed by the Japanese student community.\\nXul-Appid: {ec8030f7-c20a-464f-9b0e-13a3a9e97384}" > control
          cd $DEBWORK
          unzip $WORKDIR/.github/debian-data-ppa.zip
          find $DEBWORK -type f -print0 | xargs -0 chmod 644
          find $DEBWORK -type d -print0 | xargs -0 chmod +x
          cd DEBIAN
          chmod +x postinst postrm preinst prerm
          cd ../usr/lib/floorp
          chmod +x floorp floorp-bin floorp.sh lib*.so plugin-container gmp-clearkey/0.1/libclearkey.so
          sudo chown -R root:root $DEBWORK
          cd $WORKDIR
          sudo dpkg-deb -b $DEBWORK
          free
          df

        elif [[ $GHA_aarch64 != 'true' ]];then
          echo "OUTPUT=obj-x86_64-pc-linux-gnu/dist/*.tar.bz2" >> $GITHUB_ENV
          # zip -r dist.zip obj-x86_64-pc-linux-gnu/dist/*.tar.bz2
        elif [[ $GHA_aarch64 == 'true' && $GHA_deb != 'true' ]];then
          #aarch64
          echo "OUTPUT=obj-aarch64-unknown-linux-gnu/dist/*.tar.bz2" >> $GITHUB_ENV
          # zip -r dist.zip obj-aarch64-unknown-linux-gnu/dist/*.tar.bz2
        fi

        if [[ $GHA_raw == 'true' ]];then
          if [[ $GHA_aarch64 != 'true' ]];then
            zip -r all.zip obj-x86_64-pc-linux-gnu/dist/*
          else
            zip -r all.zip obj-aarch64-unknown-linux-gnu/dist/*
          fi
        fi
      env:
        GHA_deb: ${{inputs.deb}}
        GHA_aarch64: ${{inputs.aarch64}}
        GHA_raw: ${{inputs.with_raw}}

    #PUBLISH START
    - name: Compress artifacts (deb)🤖

      if: ${{ inputs.deb && !inputs.aarch64 }}
      run: |
        export WORKDIR=`pwd`
        export DISPVER=`cat browser/config/version_display.txt`
        export DEBWORK=$WORKDIR/floorp-$DISPVER
        sudo touch floorp-$DISPVER.deb
        sudo chmod +r floorp-$DISPVER.deb
        echo "OUTPUT=floorp-$DISPVER.deb" >> $GITHUB_ENV
        # zip -r dist.zip floorp-$DISPVER.deb

    - name: Update PPA (deb ppa) 👻
      if: ${{ inputs.deb && !inputs.aarch64 && inputs.ppa }}
      run: |
        echo "::add-mask::${{ secrets.KEYMASK }}"
        export DISPVER=`cat browser/config/version_display.txt`
        mkdir publish
        echo "${{ secrets.GPG_SEC }}" > Floorp_sec.asc
        gpg --import Floorp_sec.asc
        echo "${{ secrets.FTP_INIT_SCRIPT }}" > init_script.txt
        echo "${{ secrets.FTP_FINISH_SCRIPT }}" > finish_script.txt
        cd publish
        ftp -n -p < ../init_script.txt
        cp ../floorp-$DISPVER.deb ./
        dpkg-scanpackages --multiversion . > Packages
        gzip -k -f Packages
        apt-ftparchive release . > Release
        gpg --default-key "${{ secrets.GPG_SSB }}" -abs -o - Release > Release.gpg
        gpg --default-key "${{ secrets.GPG_SSB }}" --clearsign -o - Release > InRelease
        ftp -n -p < ../finish_script.txt
        cd ../
        rm init_script.txt finish_script.txt Floorp_sec.asc

    #! Deb && aarch64 may not supported
    - name: Publish ${{fromJson('["x64","aarch64"]')[inputs.aarch64]}} ${{fromJson('["non-deb","deb"]')[inputs.deb]}}🎁
      uses: actions/upload-artifact@v3
      with:
        name: floorp-${{fromJson('["linux","debian"]')[inputs.deb]}}-${{fromJson('["x64","aarch64"]')[inputs.aarch64]}}
        path: ${{ env.OUTPUT }}
        # path: dist.zip
    - name: Publish raw (only if with_raw)
      uses: actions/upload-artifact@v3
      if: inputs.with_raw
      with:
        name: floorp-${{fromJson('["linux","debian"]')[inputs.deb]}}-${{fromJson('["x64","aarch64"]')[inputs.aarch64]}}
        path: all.zip
    #PUBLISH END
