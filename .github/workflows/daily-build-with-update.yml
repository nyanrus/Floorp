# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# Please write our copyright if you use this file.
# ¬© 2023 Floorp Projects & Contributors

#TODO daily build not changed about cache and refactoring

name: "(B) üìÖ Daily Build with auto-update"

permissions:
  contents: write
  discussions: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'

jobs:
  get-display-version:
    runs-on: ubuntu-latest

    outputs:
      display-version: ${{ steps.get.outputs.display-version }}

    steps:
    - uses: actions/checkout@v3
      with:
        sparse-checkout: 'browser/config/version_display.txt'
      # with:
      #   ref: ESR115
    - name: Get Display Version
      id: get
      run: |
        echo "display-version=$(cat browser/config/version_display.txt)" >> $GITHUB_OUTPUT

  get-inside-version:
    runs-on: ubuntu-latest

    outputs:
      inside-version: ${{ steps.get.outputs.inside-version }}

    steps:
    - uses: actions/checkout@v3
      with:
        sparse-checkout: 'browser/config/version.txt'
      # with:
      #   ref: ESR115
    - name: Get Inside Version
      id: get
      run: |
        echo "inside-version=$(cat browser/config/version.txt)" >> $GITHUB_OUTPUT

  get-buildid:
    runs-on: ubuntu-latest

    outputs:
      buildids: ${{ steps.get.outputs.bid }}

    steps:
    - id: get
      shell: bash -xe {0}
      run: |
        bdat=`date +"%Y%m%d%I%M%S"`
        echo "bid=${bdat}" >> $GITHUB_OUTPUT

#TODO! ####################WILL REPLACE S############################
#? Original branding of the code is official
#? It seems in PGO build, branding is not important in NOT deploying binary
  build-win-x86_64-profgen:
    uses: ./.github/workflows/windows-build.yml
    with:
      profgen: true
      aarch64: false
      zstd: true
#TODO! ####################WILL REPLACE E############################

  win-x86_64-gen-profdata-and-jarlog:

    needs: build-win-x86_64-profgen
    runs-on: windows-2022

    steps:
    - uses: actions/download-artifact@v3
      name: Download artifact üì•
      with:
        name: floorp-windows-x86_64-build-with-profgen-zstd
        path: C:\artifact

    - name:  Unpack artifact
      run: |
        cd C:\artifact
        zstd -d floorp-*.tar.zst
        7z x floorp-*.tar

    - uses: actions/checkout@v3
      # with:
      #   ref: ESR115
      name: Clone üß¨

    - name: Setup ü™õ
      run: |
        (New-Object System.Net.WebClient).DownloadFile("https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe","C:\MozillaBuildSetup-Latest.exe")
        C:\MozillaBuildSetup-Latest.exe /S | out-null

    - name: Generate üîÑ
      run: |
        $workspace_dir = [regex]::replace($env:GITHUB_WORKSPACE, "^([A-Z]):", { "/" + $args.value.Substring(0, 1).toLower() }) -replace "\\","/"

        echo "cd $workspace_dir" '' >> mozilla-build-run.sh
        echo 'export PATH=/c/mozilla-build/msys2/usr/bin:$PATH' '' >> mozilla-build-run.sh
        echo './mach --no-interactive bootstrap --application-choice browser' '' >> mozilla-build-run.sh
        echo 'LLVM_PROFDATA=/c/Users/runneradmin/.mozbuild/clang/bin/llvm-profdata.exe JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary /c/artifact/floorp/floorp.exe' '' >> mozilla-build-run.sh
        C:\mozilla-build\start-shell.bat $workspace_dir\mozilla-build-run.sh

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: floorp-windows-x86_64-profdata-and-jarlog
        path: |
          merged.profdata
          en-US.log

  build-win-x86_64-with-profdata-and-jarlog:
    needs: [win-x86_64-gen-profdata-and-jarlog,get-buildid]
    uses: ./.github/workflows/windows-build.yml
    with:
      aarch64: false
      mar: true
      beta_branding: true
      use_profdata_jarlog: "floorp-windows-x86_64-profdata-and-jarlog"
      out_artifact_name: please-use-this-floorp-windows-x86_64-package-build-with-profdata-and-jarlog
      MOZ_BUILD_DATE: ${{needs.get-buildid.outputs.buildids}}

  win-x86_64-gen-mar:
    needs: [get-display-version, get-buildid, get-inside-version,build-win-x86_64-with-profdata-and-jarlog]
    runs-on: ubuntu-latest
    steps:
    - name: generate update XML file
      run: |
        echo '<?xml version="1.0" encoding="UTF-8"?>
          <updates>
            <update
              type="minor"
              displayVersion="${{ needs.get-display-version.outputs.display-version }}"
              appVersion="${{ needs.get-inside-version.outputs.inside-version }}"
              platformVersion="${{ needs.get-inside-version.outputs.inside-version }}"
              buildID="${{ needs.get-buildid.outputs.buildids }}"
              detailsURL="https://blog.ablaze.one/category/ablaze/ablaze-project/floorp/"
            >
            <patch
              type="complete"
              URL="https://github.com/${{ github.repository }}/releases/download/beta/${{needs.build-win-x86_64-with-profdata-and-jarlog.outputs.mar_name}}"
              size="${{ needs.build-win-x86_64-with-profdata-and-jarlog.outputs.mar_size }}"
            />
            </update>
          </updates>' > WINNT-x86_64.xml

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: update-xml-floorp-win-x86_64
        path: |
          WINNT-x86_64.xml

######################################################## ‚Üë Windows x86_64 ########################################################

#TODO! ####################WILL REPLACE S############################
  build-linux-x86_64-PGO:
    needs: [win-x86_64-gen-profdata-and-jarlog,get-buildid]
    uses: ./.github/workflows/linux-build.yml
    with:
      aarch64: false
      beta: true

  #TODO: integrate to linux build like windows-build
  update-linux-mar:
    runs-on: 'ubuntu-latest'
    needs: [build-linux-x86_64-PGO,get-display-version,get-inside-version,get-buildid]
    steps:
      - name: Create MAR artifact üì¶
        run: |
          touch "obj-x86_64-pc-linux-gnu/dist/floorp/precomplete"
          MAR="obj-x86_64-pc-linux-gnu/dist/host/bin/mar"
          MOZ_PRODUCT_VERSION=${DISPVER}
          MAR_CHANNEL_ID=release
          ./tools/update-packaging/make_full_update.sh ./output "obj-x86_64-pc-linux-gnu/dist/floorp"

          mv ./output/*.mar ./output/LINUX-x86_64.mar
          stat -c "%s" ./output/LINUX-x86_64.mar > LINUX-MAR-sizes.txt
          export LINUX_MAR_SIZE=`stat -c "%s" ./output/LINUX-x86_64.mar`
          echo "LINUX_MAR_SIZE=$LINUX_MAR_SIZE" >> $GITHUB_ENV
        env:
          DISPVER: ${{needs.get-display-version.outputs.display-version}}

      - name: generate update XML file
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>
            <updates>
              <update
                type="minor"
                displayVersion="${DISPVER}"
                appVersion="${INSDVER}"
                platformVersion="${INSDVER}"
                buildID="${BUILDID}"
                detailsURL="https://blog.ablaze.one/category/ablaze/ablaze-project/floorp/"
              >
              <patch
                type="complete"
                URL="https://github.com/${GHREPO}/releases/download/beta/LINUX-x86_64.mar"
                size="${LINUX_MAR_SIZE}"
              />
            </update>
          </updates>' > output/LINUX-x86_64.xml
        env:
          DISPVER: ${{needs.get-display-version.outputs.display-version}}
          INSDVER: ${{needs.get-inside-version.outputs.inside-version}}
          BUILDID: ${{needs.get-buildid.outputs.buildids}}
          GHREPO: ${{github.repository}}



#TODO! ####################WILL REPLACE E############################

################################################################ ‚Üë Linux x86_64 Build ####################################################################################

#! WANT REPLACE S
  build-macOS-aarch64-with-profgen:
    runs-on: 'ubuntu-latest'

    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update
        sudo apt upgrade -y

    - name: Setup Disk & Swap Space üíø
      if: ${{ runner.name }} != 'buildjet-16vcpu-ubuntu-2204'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile

        sudo fallocate -l 8G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt clean
        sudo apt remove temurin* openjdk*
        sudo apt remove microsoft-edge* firefox* google-chrome*
        sudo apt remove mono* libmono* msbuild* dotnet*
        sudo apt remove llvm-15* llvm-14* llvm-13* llvm-12* libllvm15* libllvm14* libllvm13* libllvm12*
        sudo apt remove gfortran* php* julia* r-*
        sudo apt remove mysql* postgresql*
        sudo apt remove google-cloud-sdk azure-cli powershell snapd

        sudo rm -rf /usr/share/swift &
        sudo rm -rf /usr/local/aws-cli &
        sudo rm -rf /usr/local/aws-sam-cli &
        sudo rm -rf /usr/local/julia* &
        sudo rm -rf /usr/local/lib/android &
        sudo rm -rf /usr/local/lib/node_modules &
        sudo rm -rf /opt/hostedtoolcache &
        sudo rm -rf /opt/pipx &
        sudo rm -rf /snap &
        wait

        sudo fallocate -l 12G /home/runner/swapfile
        sudo chmod 600 /home/runner/swapfile
        sudo mkswap /home/runner/swapfile
        sudo swapon /home/runner/swapfile

        sudo sysctl vm.swappiness=10

        echo
        echo

        echo After:
        free -h
        df -h

    - uses: actions/checkout@v3

    - name: Create environment üå≤
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        sudo apt update
        sudo apt upgrade -y

        cp ./.github/mozconfig_darwin_pgo_base mozconfig

        echo 'ac_add_options --target=aarch64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O3 -mcpu=apple-m1 -w"' >> mozconfig
        echo 'export RUSTFLAGS="-Ctarget-cpu=apple-m1"' >> mozconfig

        echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig

        echo 'mozconfig: **********************'
        cat ./mozconfig
        echo '*********************************'

        ./mach --no-interactive bootstrap --application-choice browser

    - name: setup cross compile environment üìÄ
      run: |
        wget -P /home/runner/cross-tools/ https://repo.ablaze.one/data/floorp/macos-cross-tools/macOS-cross-tools.7z
        7z x -y -p${{ secrets.MACOS_CROSS_TOOLS_KEY }} /home/runner/cross-tools/macOS-cross-tools.7z -o/home/runner/cross-tools/

    - name: setup rust ü¶Ä
      run: |
        rustup target add aarch64-apple-darwin

    - name: Build üî®
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach configure
        ./mach build

    - name: Package üì¶
      run: |
        # export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach package
        tar zcvf aarch64-apple-darwin-output.tar.xz ./obj-aarch64-apple-darwin/dist/floorp

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: aarch64-apple-darwin
        path: aarch64-apple-darwin-output.tar.xz

  macOS-aarch64-gen-profdata-and-jarlog:
    needs: [build-macOS-aarch64-with-profgen]

    runs-on: self-hosted
    # GitHub doesn't support M1 macs yet, so we need to use a self-hosted runner.

    steps:
      - name: Init
        run: |
          export RUNNER_USERDIR=`echo ~`
          export WORKING_DIR=`pwd`
          echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV
          echo "WORKING_DIR=$WORKING_DIR" >> $GITHUB_ENV
          mkdir -p ~/downloads/artifacts

      - name: Clean up (Self-hosted only)
        if: ${{ runner.name }} == 'self-hosted'
        run: |
          rm -rf ~/downloads/artifacts
          rm -rf ./floorp

      - uses: actions/download-artifact@v3
        id: download-artifact-M1
        name: Download artifact üì•
        with:
          name: aarch64-apple-darwin
          path: ~/downloads/artifacts

      - uses: actions/checkout@v3
        name: Clone üß¨
        # with:
        #   ref: ESR115

      - name: setup environment üå≤
        run: |
          echo -e "ac_add_options --enable-bootstrap" >> mozconfig

          echo 'mozconfig: **********************'
          cat ./mozconfig
          echo '*********************************'

          brew install gnu-tar
          export PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH
          ./mach --no-interactive bootstrap --application-choice browser

      - name: Extract Artifact üì¶
        run: |
          cp ${{steps.download-artifact-M1.outputs.download-path}}/aarch64-apple-darwin-output.tar.xz ./
          tar xf aarch64-apple-darwin-output.tar.xz

      - name: Generate Profdata üìä
        run: |
          LLVM_PROFDATA=/Users/surapunoyousei/.mozbuild/clang/bin/llvm-profdata JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary ./obj-aarch64-apple-darwin/dist/floorp/Floorp.app/Contents/MacOS/floorp

      - name: Publish üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: floorp-aarch64-apple-darwin-profdata-and-jarlog
          path: |
            merged.profdata
            en-US.log

  build-macOS-aarch64-with-profdata-and-jarlog:
    runs-on: 'ubuntu-latest'

    needs: [macOS-aarch64-gen-profdata-and-jarlog, get-buildid]

    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - name: Change PPA mirror servers
      run: |
          sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
          sudo apt update
          sudo apt upgrade -y

    - name: Setup Disk & Swap Space üíø
      if: ${{ runner.name }} != 'buildjet-16vcpu-ubuntu-2204'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile

        sudo fallocate -l 8G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt clean
        sudo apt remove temurin* openjdk*
        sudo apt remove microsoft-edge* firefox* google-chrome*
        sudo apt remove mono* libmono* msbuild* dotnet*
        sudo apt remove llvm-15* llvm-14* llvm-13* llvm-12* libllvm15* libllvm14* libllvm13* libllvm12*
        sudo apt remove gfortran* php* julia* r-*
        sudo apt remove mysql* postgresql*
        sudo apt remove google-cloud-sdk azure-cli powershell snapd

        sudo rm -rf /usr/share/swift &
        sudo rm -rf /usr/local/aws-cli &
        sudo rm -rf /usr/local/aws-sam-cli &
        sudo rm -rf /usr/local/julia* &
        sudo rm -rf /usr/local/lib/android &
        sudo rm -rf /usr/local/lib/node_modules &
        sudo rm -rf /opt/hostedtoolcache &
        sudo rm -rf /opt/pipx &
        sudo rm -rf /snap &
        wait

        sudo fallocate -l 12G /home/runner/swapfile
        sudo chmod 600 /home/runner/swapfile
        sudo mkswap /home/runner/swapfile
        sudo swapon /home/runner/swapfile

        sudo sysctl vm.swappiness=10

        echo
        echo

        echo After:
        free -h
        df -h

    - uses: actions/checkout@v3
      # with:
      #   ref: ESR115

    - name: download artifact üì•
      uses: actions/download-artifact@v3
      with:
        name: floorp-aarch64-apple-darwin-profdata-and-jarlog
        path: /home/runner/profdata-and-jarlog/

    - name: Clone l10n-central üß¨
      run: |
        git clone --depth 1 -b 11.0.0 https://github.com/Floorp-Projects/l10n-central.git $RUNNER_USERDIR/l10n-central

    - name: Copy l10n files
      run: |
        for dir in $(ls -l $RUNNER_USERDIR/l10n-central/l10n-central | grep ^d | awk '{print $9}'); do
            mkdir -p $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta
            cp ./browser/branding/beta/locales/en-US/brand.dtd $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.dtd
            cp ./browser/branding/beta/locales/en-US/brand.ftl $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.ftl
            cp ./browser/branding/beta/locales/en-US/brand.properties $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.properties
        done

    - name: Change update url
      run: |
        sed -i 's|https://@MOZ_APPUPDATE_HOST@/browser/%DISPLAY_VERSION%/%OS%/%ARCH%/update.xml|https://@MOZ_APPUPDATE_HOST@/${{ github.repository }}/releases/download/beta/DARWIN-Universal.xml |g' ./build/application.ini.in
        sed -i 's/floorp-update.ablaze.one/github.com/g' ./build/moz.build

    - name: Create environment üå≤
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        sudo apt update
        sudo apt upgrade -y

        cp ./.github/mozconfig_darwin_pgo_base mozconfig

        echo 'ac_add_options --target=aarch64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O3 -mcpu=apple-m1 -w"' >> mozconfig
        echo 'export RUSTFLAGS="-Ctarget-cpu=apple-m1"' >> mozconfig
        echo 'ac_add_options --with-pgo-profile-path=/home/runner/profdata-and-jarlog/merged.profdata' >> mozconfig
        echo 'ac_add_options --with-pgo-jarlog=/home/runner/profdata-and-jarlog/en-US.log' >> mozconfig
        echo 'ac_add_options --enable-profile-use=cross' >> mozconfig

        echo 'ac_add_options --with-l10n-base=$RUNNER_USERDIR/l10n-central/l10n-central' >> mozconfig

        echo 'mozconfig: **********************'
        cat ./mozconfig
        echo '*********************************'

        ./mach --no-interactive bootstrap --application-choice browser

    - name: setup cross compile environment üìÄ
      run: |
        wget -P /home/runner/cross-tools/ https://repo.ablaze.one/data/floorp/macos-cross-tools/macOS-cross-tools.7z
        7z x -y -p${{ secrets.MACOS_CROSS_TOOLS_KEY }} /home/runner/cross-tools/macOS-cross-tools.7z -o/home/runner/cross-tools/

    - name: setup rust ü¶Ä
      run: |
        rustup target add aarch64-apple-darwin

    - name: Build üî®
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach configure
        ./mach build

    - name: Package üì¶
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach package
        export MOZ_CHROME_MULTILOCALE="ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th tr vi zh-CN zh-TW"
        for AB_CD in $MOZ_CHROME_MULTILOCALE; do    ./mach build chrome-$AB_CD; done
        ./mach build
        ./mach package
        AB_CD=multi ./mach package

    - name: compression üóúÔ∏è
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        tar -czf floorp-aarch64-apple-darwin-with-pgo.tar.gz ./obj-aarch64-apple-darwin/dist/

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: floorp-aarch64-apple-darwin-with-pgo
        path: floorp-aarch64-apple-darwin-with-pgo.tar.gz

##################################################################### Intel Build #######################################################################################################

#! WANT REPLACE
  build-macOS-x86_64-with-profgen:
    runs-on: 'ubuntu-latest'
    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - uses: actions/checkout@v3
      # with:
      #   ref: ESR115

    - name: Change PPA mirror servers
      run: |
        sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
        sudo apt update

    - name: Setup Disk & Swap Space üíø
      if: ${{ runner.name }} != 'buildjet-16vcpu-ubuntu-2204'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile

        sudo fallocate -l 8G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt clean
        sudo apt remove temurin* openjdk*
        sudo apt remove microsoft-edge* firefox* google-chrome*
        sudo apt remove mono* libmono* msbuild* dotnet*
        sudo apt remove llvm-15* llvm-14* llvm-13* llvm-12* libllvm15* libllvm14* libllvm13* libllvm12*
        sudo apt remove gfortran* php* julia* r-*
        sudo apt remove mysql* postgresql*
        sudo apt remove google-cloud-sdk azure-cli powershell snapd

        sudo rm -rf /usr/share/swift &
        sudo rm -rf /usr/local/aws-cli &
        sudo rm -rf /usr/local/aws-sam-cli &
        sudo rm -rf /usr/local/julia* &
        sudo rm -rf /usr/local/lib/android &
        sudo rm -rf /usr/local/lib/node_modules &
        sudo rm -rf /opt/hostedtoolcache &
        sudo rm -rf /opt/pipx &
        sudo rm -rf /snap &
        wait

        sudo fallocate -l 12G /home/runner/swapfile
        sudo chmod 600 /home/runner/swapfile
        sudo mkswap /home/runner/swapfile
        sudo swapon /home/runner/swapfile

        sudo sysctl vm.swappiness=10

        echo
        echo

        echo After:
        free -h
        df -h

    - name: Create environment üå≤
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        sudo apt update
        sudo apt upgrade -y

        cp ./.github/mozconfig_darwin_pgo_base mozconfig

        echo 'ac_add_options --target=x86_64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O3 -march=nehalem -mtune=haswell -w"' >> mozconfig
        echo 'export RUSTFLAGS="-Ctarget-cpu=nehalem"' >> mozconfig

        echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig

        echo 'mozconfig: **********************'
        cat ./mozconfig
        echo '*********************************'

        ./mach --no-interactive bootstrap --application-choice browser

    - name: setup cross compile environment üìÄ
      run: |
        wget -P /home/runner/cross-tools/ https://repo.ablaze.one/data/floorp/macos-cross-tools/macOS-cross-tools.7z
        7z x -y -p${{ secrets.MACOS_CROSS_TOOLS_KEY }} /home/runner/cross-tools/macOS-cross-tools.7z -o/home/runner/cross-tools/

    - name: setup rust ü¶Ä
      run: |
        rustup target add x86_64-apple-darwin

    - name: Build üî®
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach configure
        ./mach build

    - name: Package üì¶
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach package
        tar zcvf x86_64-apple-darwin.tar.xz ./obj-x86_64-apple-darwin/dist/floorp

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: x86_64-apple-darwin
        path: x86_64-apple-darwin.tar.xz

  macOS-x86_64-gen-profdata-and-jarlog:
    needs: [build-macOS-x86_64-with-profgen]

    runs-on: macos-latest

    steps:
      - name: Init
        run: |
          export RUNNER_USERDIR=`echo ~`
          echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV
          mkdir -p ~/downloads/artifacts

      - uses: actions/download-artifact@v3
        name: Download artifact üì•
        id: download-artifact-Intel
        with:
          name: x86_64-apple-darwin
          path: ~/downloads/artifacts

      - uses: actions/checkout@v3
        name: Clone üß¨
        # with:
        #   ref: ESR115

      - name: setup environment üå≤
        run: |
          echo -e "ac_add_options --enable-bootstrap" >> mozconfig

          echo 'mozconfig: **********************'
          cat ./mozconfig
          echo '*********************************'

          brew install gnu-tar
          export PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH
          ./mach --no-interactive bootstrap --application-choice browser

      - name: Extract Artifact üì¶
        run: |
          cp ${{ steps.download-artifact-Intel.outputs.download-path }}/x86_64-apple-darwin.tar.xz ./
          tar xf x86_64-apple-darwin.tar.xz

      - name: Generate Profdata üìä
        run: |
          LLVM_PROFDATA=$RUNNER_USERDIR/.mozbuild/clang/bin/llvm-profdata JARLOG_FILE=en-US.log ./mach python build/pgo/profileserver.py --binary ./obj-x86_64-apple-darwin/dist/floorp/Floorp.app/Contents/MacOS/floorp

      - name: Publish üéÅ
        uses: actions/upload-artifact@v3
        with:
          name: floorp-x86_64-apple-darwin-profdata-and-jarlog
          path: |
            merged.profdata
            en-US.log

  build-macOS-x86_64-with-profdata-and-jarlog:
    runs-on: 'ubuntu-latest'

    needs: [macOS-x86_64-gen-profdata-and-jarlog, get-buildid]

    steps:
    - name: Init
      run: |
        export RUNNER_USERDIR=`echo ~`
        echo "RUNNER_USERDIR=$RUNNER_USERDIR" >> $GITHUB_ENV

    - name: Change PPA mirror servers
      run: |
          sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
          sudo apt update
          sudo apt upgrade -y

    - name: Setup Disk & Swap Space üíø
      if: ${{ runner.name }} != 'buildjet-16vcpu-ubuntu-2204'
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile

        sudo fallocate -l 8G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt clean
        sudo apt remove temurin* openjdk*
        sudo apt remove microsoft-edge* firefox* google-chrome*
        sudo apt remove mono* libmono* msbuild* dotnet*
        sudo apt remove llvm-15* llvm-14* llvm-13* llvm-12* libllvm15* libllvm14* libllvm13* libllvm12*
        sudo apt remove gfortran* php* julia* r-*
        sudo apt remove mysql* postgresql*
        sudo apt remove google-cloud-sdk azure-cli powershell snapd

        sudo rm -rf /usr/share/swift &
        sudo rm -rf /usr/local/aws-cli &
        sudo rm -rf /usr/local/aws-sam-cli &
        sudo rm -rf /usr/local/julia* &
        sudo rm -rf /usr/local/lib/android &
        sudo rm -rf /usr/local/lib/node_modules &
        sudo rm -rf /opt/hostedtoolcache &
        sudo rm -rf /opt/pipx &
        sudo rm -rf /snap &
        wait

        sudo fallocate -l 12G /home/runner/swapfile
        sudo chmod 600 /home/runner/swapfile
        sudo mkswap /home/runner/swapfile
        sudo swapon /home/runner/swapfile

        sudo sysctl vm.swappiness=10

        echo
        echo

        echo After:
        free -h
        df -h

    - uses: actions/checkout@v3
      # with:
      #   ref: ESR115

    - name: download artifact üì•
      uses: actions/download-artifact@v3
      with:
        name: floorp-x86_64-apple-darwin-profdata-and-jarlog
        path: /home/runner/profdata-and-jarlog/

    - name: Clone l10n-central üß¨
      run: |
        git clone --depth 1 -b 11.0.0 https://github.com/Floorp-Projects/l10n-central.git $RUNNER_USERDIR/l10n-central

    - name: Copy l10n files
      run: |
        for dir in $(ls -l $RUNNER_USERDIR/l10n-central/l10n-central | grep ^d | awk '{print $9}'); do
            mkdir -p $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta
            cp ./browser/branding/beta/locales/en-US/brand.dtd $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.dtd
            cp ./browser/branding/beta/locales/en-US/brand.ftl $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.ftl
            cp ./browser/branding/beta/locales/en-US/brand.properties $RUNNER_USERDIR/l10n-central/l10n-central/$dir/browser/branding/beta/brand.properties
        done

    - name: Change update url
      run: |
        sed -i 's|https://@MOZ_APPUPDATE_HOST@/browser/%DISPLAY_VERSION%/%OS%/%ARCH%/update.xml|https://@MOZ_APPUPDATE_HOST@/${{ github.repository }}/releases/download/beta/DARWIN-Universal.xml |g' ./build/application.ini.in
        sed -i 's/floorp-update.ablaze.one/github.com/g' ./build/moz.build

    - name: Create environment üå≤
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        sudo apt update
        sudo apt upgrade -y

        cp ./.github/mozconfig_darwin_pgo_base mozconfig

        echo 'ac_add_options --target=x86_64-apple-darwin' >> mozconfig
        echo 'ac_add_options --enable-optimize="-O3 -march=nehalem -mtune=haswell -w"' >> mozconfig
        echo 'export RUSTFLAGS="-Ctarget-cpu=nehalem"' >> mozconfig
        echo 'ac_add_options --with-pgo-profile-path=/home/runner/profdata-and-jarlog/merged.profdata' >> mozconfig
        echo 'ac_add_options --with-pgo-jarlog=/home/runner/profdata-and-jarlog/en-US.log' >> mozconfig
        echo 'ac_add_options --enable-profile-use=cross' >> mozconfig

        echo 'ac_add_options --with-l10n-base=$RUNNER_USERDIR/l10n-central/l10n-central' >> mozconfig

        echo 'mozconfig: **********************'
        cat ./mozconfig
        echo '*********************************'

        ./mach --no-interactive bootstrap --application-choice browser

    - name: setup cross compile environment üìÄ
      run: |
        wget -P /home/runner/cross-tools/ https://repo.ablaze.one/data/floorp/macos-cross-tools/macOS-cross-tools.7z
        7z x -y -p${{ secrets.MACOS_CROSS_TOOLS_KEY }} /home/runner/cross-tools/macOS-cross-tools.7z -o/home/runner/cross-tools/

    - name: setup rust ü¶Ä
      run: |
        rustup target add x86_64-apple-darwin

    - name: Build üî®
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach configure
        ./mach build

    - name: Package üì¶
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        ./mach package
        export MOZ_CHROME_MULTILOCALE="ar cs da de el en-GB en-US es-ES es-MX fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th tr vi zh-CN zh-TW"
        for AB_CD in $MOZ_CHROME_MULTILOCALE; do    ./mach build chrome-$AB_CD; done
        ./mach build
        ./mach package
        AB_CD=multi ./mach package

    - name: compression üóúÔ∏è
      run: |
        export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}

        tar -czf floorp-x86_64-apple-darwin-with-pgo.tar.gz ./obj-x86_64-apple-darwin/dist/

    - name: Publish üéÅ
      uses: actions/upload-artifact@master
      with:
        name: floorp-x86_64-apple-darwin-with-pgo
        path: floorp-x86_64-apple-darwin-with-pgo.tar.gz

######################################################## Integration #######################################################

  macOS-gen-universal-bin:
    needs: [build-macOS-x86_64-with-profdata-and-jarlog, build-macOS-aarch64-with-profdata-and-jarlog, get-display-version, get-buildid, get-inside-version]
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      # with:
      #   ref: ESR115

    - name: download M1 build artifact üì•
      uses: actions/download-artifact@v3
      with:
        name: floorp-aarch64-apple-darwin-with-pgo
        path: ./

    - name: download Intel build artifact üì•
      uses: actions/download-artifact@v3
      with:
        name: floorp-x86_64-apple-darwin-with-pgo
        path: ./

    - name: Extract üì¶
      run: |
        brew install gnu-tar
        export PATH=/usr/local/opt/gnu-tar/libexec/gnubin:$PATH
        tar -xf ./floorp-aarch64-apple-darwin-with-pgo.tar.gz
        tar -xf ./floorp-x86_64-apple-darwin-with-pgo.tar.gz

    - name: Create environment üå≤
      shell: bash
      run: |
        ./mach --no-interactive bootstrap --application-choice browser
        echo -e "ac_add_options --enable-bootstrap" >> mozconfig

        echo 'export MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}' >> mozconfig
        echo 'MOZ_BUILD_DATE=${{ needs.get-buildid.outputs.buildids }}' >> mozconfig

        echo 'export MOZ_BUILDID=${{ needs.get-buildid.outputs.buildids }}' >> mozconfig
        echo 'MOZ_BUILDID=${{ needs.get-buildid.outputs.buildids }}' >> mozconfig

        echo 'mozconfig: **********************'
        cat ./mozconfig
        echo '*********************************'

        echo "****************************************************************************************************"
        echo "floorp.app folder structure: x86_64-apple-darwin"
        ls -l ./obj-x86_64-apple-darwin/dist/
        echo "****************************************************************************************************"
        echo "floorp.app folder structure: aarch64-apple-darwin"
        ls -l ./obj-aarch64-apple-darwin/dist/
        echo "****************************************************************************************************"

    - name: Integration üóÉ
      run: |
        ./mach python ./toolkit/mozapps/installer/unify.py ./obj-x86_64-apple-darwin/dist/Floorp/Floorp.app ./obj-aarch64-apple-darwin/dist/Floorp/Floorp.app

    - name: import APPLE DEVELOPER ID CERTIFICATE for .app üîë
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.macOS_CERTIFICATES_P12_For_App_BASE64 }}
        p12-password: ${{ secrets.macOS_CERTIFICATES_P12_PASSWORD }}

    - name: Sign to .app üñãÔ∏è
      run: |
        chmod +x ./floorp/build/codesign/mac/codesign.bash

        ./floorp/build/codesign/mac/codesign.bash \
          -a ./obj-x86_64-apple-darwin/dist/floorp/Floorp.app \
          -i "${{ secrets.macOS_AppleDeveloperId }}" \
          -b ./floorp/build/codesign/mac/browser.developer.entitlements.xml \
          -p ./floorp/build/codesign/mac/plugin-container.developer.entitlements.xml

        echo "Sign Complete ! ****************************************"
        pkgutil --check-signature ./obj-x86_64-apple-darwin/dist/floorp/Floorp.app

    - name: Package üì¶
      run: |
        ./mach python -m mozbuild.action.make_dmg ./obj-x86_64-apple-darwin/dist/Floorp floorp-macOS-universal-temp.dmg
        unzip ./.github/base.zip
        hdiutil attach ./floorp-macOS-universal-temp.dmg
        hdiutil attach ./base.dmg
        cp -r /Volumes/Floorp/Floorp.app /Volumes/Floorp\ Installer/
        hdiutil detach /Volumes/Floorp\ Installer/
        hdiutil convert ./base.dmg -format UDZO -imagekey zlib-level=9 -o floorp-macOS-universal.dmg

    - name: Sign to .dmg üñãÔ∏è
      run: |
          codesign -s "${{ secrets.macOS_AppleDeveloperId }}" floorp-macOS-universal.dmg

          xcrun notarytool submit "floorp-macOS-universal.dmg" \
            --apple-id "${{ secrets.macOS_AppleAccountId }}" \
            --team-id "${{ secrets.macOS_AppleTeamId }}" \
            --password "${{ secrets.macOS_AppleAccountAppSpecificPassword }}" \
            --wait

          mkdir -p ./output
          mv ./floorp-macOS-universal.dmg ./output/floorp-macOS-universal.dmg

    - name: Create MAR artifact üì¶
      run: |
        brew install tree
        chmod +x ./floorp/build/bin/mac/mar
        chmod +x ./tools/update-packaging/make_full_update.sh

        touch "obj-x86_64-apple-darwin/dist/floorp/precomplete"
        MAR="floorp/build/bin/mac/mar" MOZ_PRODUCT_VERSION=${{ needs.get-display-version.outputs.display-version }} MAR_CHANNEL_ID=release tools/update-packaging/make_full_update.sh ./output/DARWIN-Universal.mar "obj-x86_64-apple-darwin/dist/floorp/Floorp.app"

        export MACOS_MAR_SIZE=`stat -f%z ./output/DARWIN-Universal.mar`
        echo "MACOS_MAR_SIZE=$MACOS_MAR_SIZE" >> $GITHUB_ENV

    - name: generate update XML file
      run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>
            <updates>
            <update type="minor" displayVersion="${{ needs.get-display-version.outputs.display-version }}" appVersion="${{ needs.get-inside-version.outputs.inside-version }}" platformVersion="${{ needs.get-inside-version.outputs.inside-version }}" buildID="${{ needs.get-buildid.outputs.buildids }}" detailsURL="https://blog.ablaze.one/category/ablaze/ablaze-project/floorp/">
            <patch type="complete" URL="https://github.com/${{ github.repository }}/releases/download/beta/DARWIN-Universal.mar" size="${{ env.MACOS_MAR_SIZE }}" />
            </update>
          </updates>' > DARWIN-Universal.xml

          cp DARWIN-Universal.xml output/DARWIN-Universal.xml

    - name: Publish üéÅ
      uses: actions/upload-artifact@v3
      with:
        name: Universal-Artifact
        path: |
          ./output/floorp-macOS-universal.dmg
          ./output/DARWIN-Universal.mar
          ./output/DARWIN-Universal.xml

##################################################################### Deployments #######################################################################################################

  Deployments:
    needs: [get-display-version, get-buildid, get-inside-version, update-linux-mar, build-win-x86_64-with-profdata-and-jarlog, macOS-gen-universal-bin]
    runs-on: ubuntu-latest
    environment:
      name: Deploy-to-stable-release
    steps:

    - name: Release version & dateüì¶
      run: |
        echo "Release version: ${{ needs.get-display-version.outputs.display-version }}"
        echo "Release date: ${{ needs.get-buildid.outputs.buildids }}"

    - name: make directory üìÅ
      run: |
        mkdir -p ~/downloads/artifacts
        mkdir -p ~/downloads/artifacts/linux-x64
        mkdir -p ~/downloads/artifacts/windows-x64
        mkdir -p ~/downloads/artifacts/macOS-x64

    - name: download Linux x86_64 build artifact üì•
      uses: actions/download-artifact@v3
      with:
        name: floorp-linux-x64
        path: ~/downloads/artifacts/linux-x64

    - name: download Windows x64_86 build artifactüì•
      uses: actions/download-artifact@v3
      with:
        name: please-use-this-floorp-windows-x86_64-package-build-with-profdata-and-jarlog
        path: ~/downloads/artifacts/windows-x64

    - name: download macOS x86_64 build artifactüì•
      uses: actions/download-artifact@v3
      with:
        name: Universal-Artifact
        path: ~/downloads/artifacts/macOS-x64

    - name: check file structure üóÉ
      run: |
        cd ~/downloads/artifacts
        echo "current directory: $PWD"
        echo "****************************************************************************************************"
        find . -print | sed -e "s;[^/]*/;|____;g;s;____|; |;g"
        echo "****************************************************************************************************"

    - name: Deploy to GitHub Releases üöÄ
      id: create_release
      uses: "softprops/action-gh-release@v1"
      with:
        files: |
          /home/runner/downloads/artifacts/linux-x64/LINUX-x86_64.mar
          /home/runner/downloads/artifacts/windows-x64/WINNT-x86_64.mar
          /home/runner/downloads/artifacts/macOS-x64/DARWIN-Universal.mar
          /home/runner/downloads/artifacts/linux-x64/floorp.en-US.linux-x86_64.tar.bz2
          /home/runner/downloads/artifacts/windows-x64/floorp.en-US.win64.installer.exe
          /home/runner/downloads/artifacts/windows-x64/floorp.en-US.win64.zip
          /home/runner/downloads/artifacts/macOS-x64/floorp-macOS-universal.dmg
          /home/runner/downloads/artifacts/windows-x64/WINNT-x86_64.xml
          /home/runner/downloads/artifacts/linux-x64/LINUX-x86_64.xml
          /home/runner/downloads/artifacts/macOS-x64/DARWIN-Universal.xml

        tag_name: "beta"
        name: "Floorp beta build: v${{ needs.get-display-version.outputs.display-version }} | ${{ needs.get-buildid.outputs.buildids }}"
        body: |
          "Floorp Daylight": v${{ needs.get-display-version.outputs.display-version }} (Firefox v${{ needs.get-inside-version.outputs.inside-version }})

          **This is NOT the release (stable) channel version of Floorp. This is a beta build of Floorp. It is intended for testing purposes only. It is not recommended that you use this version of Floorp for daily browsing. If you would like to download the release version of Floorp, please visit [floorp.app](https://floorp.app).**
        draft: false
        prerelease: true
        token: ${{ secrets.GITHUB_TOKEN }}
    env:
      GITHUB_REPOSITORY: ${{ github.repository }}
